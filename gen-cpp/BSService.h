/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BSService_H
#define BSService_H

#include <thrift/TDispatchProcessor.h>
#include "ui2bs_types.h"

namespace internal {

class BSServiceIf {
 public:
  virtual ~BSServiceIf() {}
  virtual void search(BSResponse& _return, const BSRequest& req) = 0;
};

class BSServiceIfFactory {
 public:
  typedef BSServiceIf Handler;

  virtual ~BSServiceIfFactory() {}

  virtual BSServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BSServiceIf* /* handler */) = 0;
};

class BSServiceIfSingletonFactory : virtual public BSServiceIfFactory {
 public:
  BSServiceIfSingletonFactory(const boost::shared_ptr<BSServiceIf>& iface) : iface_(iface) {}
  virtual ~BSServiceIfSingletonFactory() {}

  virtual BSServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BSServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<BSServiceIf> iface_;
};

class BSServiceNull : virtual public BSServiceIf {
 public:
  virtual ~BSServiceNull() {}
  void search(BSResponse& /* _return */, const BSRequest& /* req */) {
    return;
  }
};

typedef struct _BSService_search_args__isset {
  _BSService_search_args__isset() : req(false) {}
  bool req;
} _BSService_search_args__isset;

class BSService_search_args {
 public:

  BSService_search_args() {
  }

  virtual ~BSService_search_args() throw() {}

  BSRequest req;

  _BSService_search_args__isset __isset;

  void __set_req(const BSRequest& val) {
    req = val;
  }

  bool operator == (const BSService_search_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const BSService_search_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BSService_search_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BSService_search_pargs {
 public:


  virtual ~BSService_search_pargs() throw() {}

  const BSRequest* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BSService_search_result__isset {
  _BSService_search_result__isset() : success(false) {}
  bool success;
} _BSService_search_result__isset;

class BSService_search_result {
 public:

  BSService_search_result() {
  }

  virtual ~BSService_search_result() throw() {}

  BSResponse success;

  _BSService_search_result__isset __isset;

  void __set_success(const BSResponse& val) {
    success = val;
  }

  bool operator == (const BSService_search_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BSService_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BSService_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BSService_search_presult__isset {
  _BSService_search_presult__isset() : success(false) {}
  bool success;
} _BSService_search_presult__isset;

class BSService_search_presult {
 public:


  virtual ~BSService_search_presult() throw() {}

  BSResponse* success;

  _BSService_search_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BSServiceClient : virtual public BSServiceIf {
 public:
  BSServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BSServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void search(BSResponse& _return, const BSRequest& req);
  void send_search(const BSRequest& req);
  void recv_search(BSResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BSServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BSServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BSServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_search(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BSServiceProcessor(boost::shared_ptr<BSServiceIf> iface) :
    iface_(iface) {
    processMap_["search"] = &BSServiceProcessor::process_search;
  }

  virtual ~BSServiceProcessor() {}
};

class BSServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BSServiceProcessorFactory(const ::boost::shared_ptr< BSServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BSServiceIfFactory > handlerFactory_;
};

class BSServiceMultiface : virtual public BSServiceIf {
 public:
  BSServiceMultiface(std::vector<boost::shared_ptr<BSServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BSServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BSServiceIf> > ifaces_;
  BSServiceMultiface() {}
  void add(boost::shared_ptr<BSServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void search(BSResponse& _return, const BSRequest& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search(_return, req);
    }
    ifaces_[i]->search(_return, req);
    return;
  }

};

} // namespace

#endif
