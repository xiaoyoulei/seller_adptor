/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ui2bs_TYPES_H
#define ui2bs_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace internal {

struct AdSlotType {
  enum type {
    BANNER = 1,
    OFFERWALL = 2,
    RECOMMEND = 3,
    INTERSTITIAL = 4
  };
};

extern const std::map<int, const char*> _AdSlotType_VALUES_TO_NAMES;

struct AdSlotStyle {
  enum type {
    TEXT = 1,
    IMAGE = 2,
    ICON_TEXT = 3,
    SMART_AD = 4,
    VIDEO = 5
  };
};

extern const std::map<int, const char*> _AdSlotStyle_VALUES_TO_NAMES;

struct OSType {
  enum type {
    UNKNOWN = 0,
    ANDROID = 1,
    IOS = 2,
    WP = 3
  };
};

extern const std::map<int, const char*> _OSType_VALUES_TO_NAMES;

struct DeviceIDType {
  enum type {
    IMEI = 1,
    MAC = 2,
    IDFA = 3,
    AAID = 4,
    OPENUDID = 5,
    ANDROIDID = 6,
    UDID = 7,
    ODIN = 8,
    DUID = 9
  };
};

extern const std::map<int, const char*> _DeviceIDType_VALUES_TO_NAMES;

struct NetworkType {
  enum type {
    WIFI = 1,
    CELLULAR_UNKNOWN = 2,
    CELLULAR_2G = 3,
    CELLULAR_3G = 4,
    CELLULAR_4G = 5
  };
};

extern const std::map<int, const char*> _NetworkType_VALUES_TO_NAMES;


class Media {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  Media() : appsid(), channel_id() {
  }

  virtual ~Media() throw() {}

  std::string appsid;
  std::string channel_id;

  void __set_appsid(const std::string& val) {
    appsid = val;
  }

  void __set_channel_id(const std::string& val) {
    channel_id = val;
  }

  bool operator == (const Media & rhs) const
  {
    if (!(appsid == rhs.appsid))
      return false;
    if (!(channel_id == rhs.channel_id))
      return false;
    return true;
  }
  bool operator != (const Media &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Media & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Media &a, Media &b);

typedef struct _Size__isset {
  _Size__isset() : width(false), height(false) {}
  bool width;
  bool height;
} _Size__isset;

class Size {
 public:

  static const char* ascii_fingerprint; // = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
  static const uint8_t binary_fingerprint[16]; // = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

  Size() : width(0), height(0) {
  }

  virtual ~Size() throw() {}

  int32_t width;
  int32_t height;

  _Size__isset __isset;

  void __set_width(const int32_t val) {
    width = val;
  }

  void __set_height(const int32_t val) {
    height = val;
  }

  bool operator == (const Size & rhs) const
  {
    if (!(width == rhs.width))
      return false;
    if (!(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const Size &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Size & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Size &a, Size &b);

typedef struct _AdSlot__isset {
  _AdSlot__isset() : id(false), type(false), style(false), size(false), templates(false), ad_count(true) {}
  bool id;
  bool type;
  bool style;
  bool size;
  bool templates;
  bool ad_count;
} _AdSlot__isset;

class AdSlot {
 public:

  static const char* ascii_fingerprint; // = "6A115F8F0AB5A9EA0B348D7060A1F2D8";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x11,0x5F,0x8F,0x0A,0xB5,0xA9,0xEA,0x0B,0x34,0x8D,0x70,0x60,0xA1,0xF2,0xD8};

  AdSlot() : id(), type((AdSlotType::type)0), ad_count(1) {
  }

  virtual ~AdSlot() throw() {}

  std::string id;
  AdSlotType::type type;
  std::vector<AdSlotStyle::type>  style;
  Size size;
  std::set<int32_t>  templates;
  int32_t ad_count;

  _AdSlot__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_type(const AdSlotType::type val) {
    type = val;
  }

  void __set_style(const std::vector<AdSlotStyle::type> & val) {
    style = val;
  }

  void __set_size(const Size& val) {
    size = val;
  }

  void __set_templates(const std::set<int32_t> & val) {
    templates = val;
    __isset.templates = true;
  }

  void __set_ad_count(const int32_t val) {
    ad_count = val;
    __isset.ad_count = true;
  }

  bool operator == (const AdSlot & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(style == rhs.style))
      return false;
    if (!(size == rhs.size))
      return false;
    if (__isset.templates != rhs.__isset.templates)
      return false;
    else if (__isset.templates && !(templates == rhs.templates))
      return false;
    if (__isset.ad_count != rhs.__isset.ad_count)
      return false;
    else if (__isset.ad_count && !(ad_count == rhs.ad_count))
      return false;
    return true;
  }
  bool operator != (const AdSlot &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdSlot & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(AdSlot &a, AdSlot &b);

typedef struct _DeviceID__isset {
  _DeviceID__isset() : type(false), id(false), compact(false), md5(false) {}
  bool type;
  bool id;
  bool compact;
  bool md5;
} _DeviceID__isset;

class DeviceID {
 public:

  static const char* ascii_fingerprint; // = "D2CB4DFAD87769BA1AE1C222B35595DC";
  static const uint8_t binary_fingerprint[16]; // = {0xD2,0xCB,0x4D,0xFA,0xD8,0x77,0x69,0xBA,0x1A,0xE1,0xC2,0x22,0xB3,0x55,0x95,0xDC};

  DeviceID() : type((DeviceIDType::type)0), id(), compact(0), md5(0) {
  }

  virtual ~DeviceID() throw() {}

  DeviceIDType::type type;
  std::string id;
  bool compact;
  bool md5;

  _DeviceID__isset __isset;

  void __set_type(const DeviceIDType::type val) {
    type = val;
  }

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_compact(const bool val) {
    compact = val;
  }

  void __set_md5(const bool val) {
    md5 = val;
  }

  bool operator == (const DeviceID & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(compact == rhs.compact))
      return false;
    if (!(md5 == rhs.md5))
      return false;
    return true;
  }
  bool operator != (const DeviceID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DeviceID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DeviceID &a, DeviceID &b);

typedef struct _Device__isset {
  _Device__isset() : osv(false), dev_id(false) {}
  bool osv;
  bool dev_id;
} _Device__isset;

class Device {
 public:

  static const char* ascii_fingerprint; // = "DE1E120B0770E7355325D39B9C73E100";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0x1E,0x12,0x0B,0x07,0x70,0xE7,0x35,0x53,0x25,0xD3,0x9B,0x9C,0x73,0xE1,0x00};

  Device() : os((OSType::type)0), osv() {
  }

  virtual ~Device() throw() {}

  OSType::type os;
  std::string osv;
  std::vector<DeviceID>  dev_id;

  _Device__isset __isset;

  void __set_os(const OSType::type val) {
    os = val;
  }

  void __set_osv(const std::string& val) {
    osv = val;
    __isset.osv = true;
  }

  void __set_dev_id(const std::vector<DeviceID> & val) {
    dev_id = val;
  }

  bool operator == (const Device & rhs) const
  {
    if (!(os == rhs.os))
      return false;
    if (__isset.osv != rhs.__isset.osv)
      return false;
    else if (__isset.osv && !(osv == rhs.osv))
      return false;
    if (!(dev_id == rhs.dev_id))
      return false;
    return true;
  }
  bool operator != (const Device &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Device &a, Device &b);

typedef struct _Network__isset {
  _Network__isset() : ip(false), type(false), cellular_operator(false), cellular_id(false) {}
  bool ip;
  bool type;
  bool cellular_operator;
  bool cellular_id;
} _Network__isset;

class Network {
 public:

  static const char* ascii_fingerprint; // = "B8881A0FE0A53CE5DA2AC8D9DCB627A0";
  static const uint8_t binary_fingerprint[16]; // = {0xB8,0x88,0x1A,0x0F,0xE0,0xA5,0x3C,0xE5,0xDA,0x2A,0xC8,0xD9,0xDC,0xB6,0x27,0xA0};

  Network() : ip(), type((NetworkType::type)0), cellular_operator(0), cellular_id() {
  }

  virtual ~Network() throw() {}

  std::string ip;
  NetworkType::type type;
  int32_t cellular_operator;
  std::string cellular_id;

  _Network__isset __isset;

  void __set_ip(const std::string& val) {
    ip = val;
  }

  void __set_type(const NetworkType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_cellular_operator(const int32_t val) {
    cellular_operator = val;
    __isset.cellular_operator = true;
  }

  void __set_cellular_id(const std::string& val) {
    cellular_id = val;
    __isset.cellular_id = true;
  }

  bool operator == (const Network & rhs) const
  {
    if (!(ip == rhs.ip))
      return false;
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.cellular_operator != rhs.__isset.cellular_operator)
      return false;
    else if (__isset.cellular_operator && !(cellular_operator == rhs.cellular_operator))
      return false;
    if (__isset.cellular_id != rhs.__isset.cellular_id)
      return false;
    else if (__isset.cellular_id && !(cellular_id == rhs.cellular_id))
      return false;
    return true;
  }
  bool operator != (const Network &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Network & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Network &a, Network &b);


class BSRequest {
 public:

  static const char* ascii_fingerprint; // = "249631C148D82E959306B0AA7AFEAE4E";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x96,0x31,0xC1,0x48,0xD8,0x2E,0x95,0x93,0x06,0xB0,0xAA,0x7A,0xFE,0xAE,0x4E};

  BSRequest() : searchid() {
  }

  virtual ~BSRequest() throw() {}

  std::string searchid;
  Media media;
  AdSlot adslot;
  Device device;

  void __set_searchid(const std::string& val) {
    searchid = val;
  }

  void __set_media(const Media& val) {
    media = val;
  }

  void __set_adslot(const AdSlot& val) {
    adslot = val;
  }

  void __set_device(const Device& val) {
    device = val;
  }

  bool operator == (const BSRequest & rhs) const
  {
    if (!(searchid == rhs.searchid))
      return false;
    if (!(media == rhs.media))
      return false;
    if (!(adslot == rhs.adslot))
      return false;
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const BSRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BSRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BSRequest &a, BSRequest &b);

typedef struct _Ad__isset {
  _Ad__isset() : adid(false), groupid(false), planid(false), userid(false), bid(false), wuliao_type(false), width(false), height(false), title(false), desc(false), img_url(false), target_url(false), show_url(false), appname(false), app_id(false), app_logo(false), app_size(false) {}
  bool adid;
  bool groupid;
  bool planid;
  bool userid;
  bool bid;
  bool wuliao_type;
  bool width;
  bool height;
  bool title;
  bool desc;
  bool img_url;
  bool target_url;
  bool show_url;
  bool appname;
  bool app_id;
  bool app_logo;
  bool app_size;
} _Ad__isset;

class Ad {
 public:

  static const char* ascii_fingerprint; // = "4049EF09C1702CEA1A73E9AD0519274B";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x49,0xEF,0x09,0xC1,0x70,0x2C,0xEA,0x1A,0x73,0xE9,0xAD,0x05,0x19,0x27,0x4B};

  Ad() : adid(0), groupid(0), planid(0), userid(0), bid(0), wuliao_type(0), width(0), height(0), title(), desc(), img_url(), target_url(), show_url(), appname(), app_id(), app_logo(), app_size(0) {
  }

  virtual ~Ad() throw() {}

  int64_t adid;
  int64_t groupid;
  int64_t planid;
  int64_t userid;
  int64_t bid;
  int32_t wuliao_type;
  int32_t width;
  int32_t height;
  std::string title;
  std::string desc;
  std::string img_url;
  std::string target_url;
  std::string show_url;
  std::string appname;
  std::string app_id;
  std::string app_logo;
  int64_t app_size;

  _Ad__isset __isset;

  void __set_adid(const int64_t val) {
    adid = val;
    __isset.adid = true;
  }

  void __set_groupid(const int64_t val) {
    groupid = val;
    __isset.groupid = true;
  }

  void __set_planid(const int64_t val) {
    planid = val;
    __isset.planid = true;
  }

  void __set_userid(const int64_t val) {
    userid = val;
    __isset.userid = true;
  }

  void __set_bid(const int64_t val) {
    bid = val;
    __isset.bid = true;
  }

  void __set_wuliao_type(const int32_t val) {
    wuliao_type = val;
    __isset.wuliao_type = true;
  }

  void __set_width(const int32_t val) {
    width = val;
    __isset.width = true;
  }

  void __set_height(const int32_t val) {
    height = val;
    __isset.height = true;
  }

  void __set_title(const std::string& val) {
    title = val;
    __isset.title = true;
  }

  void __set_desc(const std::string& val) {
    desc = val;
    __isset.desc = true;
  }

  void __set_img_url(const std::string& val) {
    img_url = val;
    __isset.img_url = true;
  }

  void __set_target_url(const std::string& val) {
    target_url = val;
    __isset.target_url = true;
  }

  void __set_show_url(const std::string& val) {
    show_url = val;
    __isset.show_url = true;
  }

  void __set_appname(const std::string& val) {
    appname = val;
    __isset.appname = true;
  }

  void __set_app_id(const std::string& val) {
    app_id = val;
    __isset.app_id = true;
  }

  void __set_app_logo(const std::string& val) {
    app_logo = val;
    __isset.app_logo = true;
  }

  void __set_app_size(const int64_t val) {
    app_size = val;
    __isset.app_size = true;
  }

  bool operator == (const Ad & rhs) const
  {
    if (__isset.adid != rhs.__isset.adid)
      return false;
    else if (__isset.adid && !(adid == rhs.adid))
      return false;
    if (__isset.groupid != rhs.__isset.groupid)
      return false;
    else if (__isset.groupid && !(groupid == rhs.groupid))
      return false;
    if (__isset.planid != rhs.__isset.planid)
      return false;
    else if (__isset.planid && !(planid == rhs.planid))
      return false;
    if (__isset.userid != rhs.__isset.userid)
      return false;
    else if (__isset.userid && !(userid == rhs.userid))
      return false;
    if (__isset.bid != rhs.__isset.bid)
      return false;
    else if (__isset.bid && !(bid == rhs.bid))
      return false;
    if (__isset.wuliao_type != rhs.__isset.wuliao_type)
      return false;
    else if (__isset.wuliao_type && !(wuliao_type == rhs.wuliao_type))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    if (__isset.title != rhs.__isset.title)
      return false;
    else if (__isset.title && !(title == rhs.title))
      return false;
    if (__isset.desc != rhs.__isset.desc)
      return false;
    else if (__isset.desc && !(desc == rhs.desc))
      return false;
    if (__isset.img_url != rhs.__isset.img_url)
      return false;
    else if (__isset.img_url && !(img_url == rhs.img_url))
      return false;
    if (__isset.target_url != rhs.__isset.target_url)
      return false;
    else if (__isset.target_url && !(target_url == rhs.target_url))
      return false;
    if (__isset.show_url != rhs.__isset.show_url)
      return false;
    else if (__isset.show_url && !(show_url == rhs.show_url))
      return false;
    if (__isset.appname != rhs.__isset.appname)
      return false;
    else if (__isset.appname && !(appname == rhs.appname))
      return false;
    if (__isset.app_id != rhs.__isset.app_id)
      return false;
    else if (__isset.app_id && !(app_id == rhs.app_id))
      return false;
    if (__isset.app_logo != rhs.__isset.app_logo)
      return false;
    else if (__isset.app_logo && !(app_logo == rhs.app_logo))
      return false;
    if (__isset.app_size != rhs.__isset.app_size)
      return false;
    else if (__isset.app_size && !(app_size == rhs.app_size))
      return false;
    return true;
  }
  bool operator != (const Ad &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Ad & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Ad &a, Ad &b);

typedef struct _BSResponse__isset {
  _BSResponse__isset() : res_flag(false), ads(false) {}
  bool res_flag;
  bool ads;
} _BSResponse__isset;

class BSResponse {
 public:

  static const char* ascii_fingerprint; // = "917A4500E95DB906F3E46E16A86B7017";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x7A,0x45,0x00,0xE9,0x5D,0xB9,0x06,0xF3,0xE4,0x6E,0x16,0xA8,0x6B,0x70,0x17};

  BSResponse() : res_flag(0) {
  }

  virtual ~BSResponse() throw() {}

  int32_t res_flag;
  std::vector<Ad>  ads;

  _BSResponse__isset __isset;

  void __set_res_flag(const int32_t val) {
    res_flag = val;
    __isset.res_flag = true;
  }

  void __set_ads(const std::vector<Ad> & val) {
    ads = val;
    __isset.ads = true;
  }

  bool operator == (const BSResponse & rhs) const
  {
    if (__isset.res_flag != rhs.__isset.res_flag)
      return false;
    else if (__isset.res_flag && !(res_flag == rhs.res_flag))
      return false;
    if (__isset.ads != rhs.__isset.ads)
      return false;
    else if (__isset.ads && !(ads == rhs.ads))
      return false;
    return true;
  }
  bool operator != (const BSResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BSResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BSResponse &a, BSResponse &b);

} // namespace

#endif
