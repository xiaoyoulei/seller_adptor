/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ui2bs_types.h"

#include <algorithm>

namespace internal {

int _kAdSlotTypeValues[] = {
  AdSlotType::BANNER,
  AdSlotType::OFFERWALL,
  AdSlotType::RECOMMEND,
  AdSlotType::INTERSTITIAL
};
const char* _kAdSlotTypeNames[] = {
  "BANNER",
  "OFFERWALL",
  "RECOMMEND",
  "INTERSTITIAL"
};
const std::map<int, const char*> _AdSlotType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kAdSlotTypeValues, _kAdSlotTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kAdSlotStyleValues[] = {
  AdSlotStyle::TEXT,
  AdSlotStyle::IMAGE,
  AdSlotStyle::ICON_TEXT,
  AdSlotStyle::SMART_AD,
  AdSlotStyle::VIDEO
};
const char* _kAdSlotStyleNames[] = {
  "TEXT",
  "IMAGE",
  "ICON_TEXT",
  "SMART_AD",
  "VIDEO"
};
const std::map<int, const char*> _AdSlotStyle_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kAdSlotStyleValues, _kAdSlotStyleNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOSTypeValues[] = {
  OSType::UNKNOWN,
  OSType::ANDROID,
  OSType::IOS,
  OSType::WP
};
const char* _kOSTypeNames[] = {
  "UNKNOWN",
  "ANDROID",
  "IOS",
  "WP"
};
const std::map<int, const char*> _OSType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kOSTypeValues, _kOSTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDeviceIDTypeValues[] = {
  DeviceIDType::IMEI,
  DeviceIDType::MAC,
  DeviceIDType::IDFA,
  DeviceIDType::AAID,
  DeviceIDType::OPENUDID,
  DeviceIDType::ANDROIDID,
  DeviceIDType::UDID,
  DeviceIDType::ODIN,
  DeviceIDType::DUID
};
const char* _kDeviceIDTypeNames[] = {
  "IMEI",
  "MAC",
  "IDFA",
  "AAID",
  "OPENUDID",
  "ANDROIDID",
  "UDID",
  "ODIN",
  "DUID"
};
const std::map<int, const char*> _DeviceIDType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kDeviceIDTypeValues, _kDeviceIDTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kNetworkTypeValues[] = {
  NetworkType::WIFI,
  NetworkType::CELLULAR_UNKNOWN,
  NetworkType::CELLULAR_2G,
  NetworkType::CELLULAR_3G,
  NetworkType::CELLULAR_4G
};
const char* _kNetworkTypeNames[] = {
  "WIFI",
  "CELLULAR_UNKNOWN",
  "CELLULAR_2G",
  "CELLULAR_3G",
  "CELLULAR_4G"
};
const std::map<int, const char*> _NetworkType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kNetworkTypeValues, _kNetworkTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* Media::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t Media::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t Media::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_appsid = false;
  bool isset_channel_id = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appsid);
          isset_appsid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channel_id);
          isset_channel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_appsid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_channel_id)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Media::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Media");

  xfer += oprot->writeFieldBegin("appsid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->appsid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channel_id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->channel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Media &a, Media &b) {
  using ::std::swap;
  swap(a.appsid, b.appsid);
  swap(a.channel_id, b.channel_id);
}

const char* Size::ascii_fingerprint = "989D1F1AE8D148D5E2119FFEC4BBBEE3";
const uint8_t Size::binary_fingerprint[16] = {0x98,0x9D,0x1F,0x1A,0xE8,0xD1,0x48,0xD5,0xE2,0x11,0x9F,0xFE,0xC4,0xBB,0xBE,0xE3};

uint32_t Size::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Size::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Size");

  xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->width);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Size &a, Size &b) {
  using ::std::swap;
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.__isset, b.__isset);
}

const char* AdSlot::ascii_fingerprint = "6A115F8F0AB5A9EA0B348D7060A1F2D8";
const uint8_t AdSlot::binary_fingerprint[16] = {0x6A,0x11,0x5F,0x8F,0x0A,0xB5,0xA9,0xEA,0x0B,0x34,0x8D,0x70,0x60,0xA1,0xF2,0xD8};

uint32_t AdSlot::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (AdSlotType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->style.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->style.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              int32_t ecast6;
              xfer += iprot->readI32(ecast6);
              this->style[_i5] = (AdSlotStyle::type)ecast6;
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.style = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->size.read(iprot);
          this->__isset.size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->templates.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readSetBegin(_etype10, _size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              int32_t _elem12;
              xfer += iprot->readI32(_elem12);
              this->templates.insert(_elem12);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.templates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ad_count);
          this->__isset.ad_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdSlot::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("AdSlot");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("style", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->style.size()));
    std::vector<AdSlotStyle::type> ::const_iterator _iter13;
    for (_iter13 = this->style.begin(); _iter13 != this->style.end(); ++_iter13)
    {
      xfer += oprot->writeI32((int32_t)(*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("size", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->size.write(oprot);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.templates) {
    xfer += oprot->writeFieldBegin("templates", ::apache::thrift::protocol::T_SET, 5);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->templates.size()));
      std::set<int32_t> ::const_iterator _iter14;
      for (_iter14 = this->templates.begin(); _iter14 != this->templates.end(); ++_iter14)
      {
        xfer += oprot->writeI32((*_iter14));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ad_count) {
    xfer += oprot->writeFieldBegin("ad_count", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->ad_count);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdSlot &a, AdSlot &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.style, b.style);
  swap(a.size, b.size);
  swap(a.templates, b.templates);
  swap(a.ad_count, b.ad_count);
  swap(a.__isset, b.__isset);
}

const char* DeviceID::ascii_fingerprint = "D2CB4DFAD87769BA1AE1C222B35595DC";
const uint8_t DeviceID::binary_fingerprint[16] = {0xD2,0xCB,0x4D,0xFA,0xD8,0x77,0x69,0xBA,0x1A,0xE1,0xC2,0x22,0xB3,0x55,0x95,0xDC};

uint32_t DeviceID::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast15;
          xfer += iprot->readI32(ecast15);
          this->type = (DeviceIDType::type)ecast15;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->compact);
          this->__isset.compact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->md5);
          this->__isset.md5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DeviceID::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DeviceID");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("compact", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->compact);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("md5", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->md5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DeviceID &a, DeviceID &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.id, b.id);
  swap(a.compact, b.compact);
  swap(a.md5, b.md5);
  swap(a.__isset, b.__isset);
}

const char* Device::ascii_fingerprint = "DE1E120B0770E7355325D39B9C73E100";
const uint8_t Device::binary_fingerprint[16] = {0xDE,0x1E,0x12,0x0B,0x07,0x70,0xE7,0x35,0x53,0x25,0xD3,0x9B,0x9C,0x73,0xE1,0x00};

uint32_t Device::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_os = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->os = (OSType::type)ecast16;
          isset_os = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->osv);
          this->__isset.osv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dev_id.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->dev_id.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->dev_id[_i21].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.dev_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_os)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t Device::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Device");

  xfer += oprot->writeFieldBegin("os", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->os);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.osv) {
    xfer += oprot->writeFieldBegin("osv", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->osv);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldBegin("dev_id", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->dev_id.size()));
    std::vector<DeviceID> ::const_iterator _iter22;
    for (_iter22 = this->dev_id.begin(); _iter22 != this->dev_id.end(); ++_iter22)
    {
      xfer += (*_iter22).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Device &a, Device &b) {
  using ::std::swap;
  swap(a.os, b.os);
  swap(a.osv, b.osv);
  swap(a.dev_id, b.dev_id);
  swap(a.__isset, b.__isset);
}

const char* Network::ascii_fingerprint = "B8881A0FE0A53CE5DA2AC8D9DCB627A0";
const uint8_t Network::binary_fingerprint[16] = {0xB8,0x88,0x1A,0x0F,0xE0,0xA5,0x3C,0xE5,0xDA,0x2A,0xC8,0xD9,0xDC,0xB6,0x27,0xA0};

uint32_t Network::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast23;
          xfer += iprot->readI32(ecast23);
          this->type = (NetworkType::type)ecast23;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cellular_operator);
          this->__isset.cellular_operator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cellular_id);
          this->__isset.cellular_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Network::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Network");

  xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ip);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cellular_operator) {
    xfer += oprot->writeFieldBegin("cellular_operator", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->cellular_operator);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cellular_id) {
    xfer += oprot->writeFieldBegin("cellular_id", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->cellular_id);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Network &a, Network &b) {
  using ::std::swap;
  swap(a.ip, b.ip);
  swap(a.type, b.type);
  swap(a.cellular_operator, b.cellular_operator);
  swap(a.cellular_id, b.cellular_id);
  swap(a.__isset, b.__isset);
}

const char* BSRequest::ascii_fingerprint = "249631C148D82E959306B0AA7AFEAE4E";
const uint8_t BSRequest::binary_fingerprint[16] = {0x24,0x96,0x31,0xC1,0x48,0xD8,0x2E,0x95,0x93,0x06,0xB0,0xAA,0x7A,0xFE,0xAE,0x4E};

uint32_t BSRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_searchid = false;
  bool isset_media = false;
  bool isset_adslot = false;
  bool isset_device = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->searchid);
          isset_searchid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->media.read(iprot);
          isset_media = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->adslot.read(iprot);
          isset_adslot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->device.read(iprot);
          isset_device = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_searchid)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_media)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_adslot)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_device)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t BSRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BSRequest");

  xfer += oprot->writeFieldBegin("searchid", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->searchid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("media", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->media.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("adslot", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->adslot.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("device", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->device.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BSRequest &a, BSRequest &b) {
  using ::std::swap;
  swap(a.searchid, b.searchid);
  swap(a.media, b.media);
  swap(a.adslot, b.adslot);
  swap(a.device, b.device);
}

const char* Ad::ascii_fingerprint = "4049EF09C1702CEA1A73E9AD0519274B";
const uint8_t Ad::binary_fingerprint[16] = {0x40,0x49,0xEF,0x09,0xC1,0x70,0x2C,0xEA,0x1A,0x73,0xE9,0xAD,0x05,0x19,0x27,0x4B};

uint32_t Ad::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->adid);
          this->__isset.adid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->groupid);
          this->__isset.groupid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->planid);
          this->__isset.planid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->userid);
          this->__isset.userid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bid);
          this->__isset.bid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wuliao_type);
          this->__isset.wuliao_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->width);
          this->__isset.width = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->height);
          this->__isset.height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->desc);
          this->__isset.desc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->img_url);
          this->__isset.img_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->target_url);
          this->__isset.target_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->show_url);
          this->__isset.show_url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->appname);
          this->__isset.appname = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_id);
          this->__isset.app_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->app_logo);
          this->__isset.app_logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->app_size);
          this->__isset.app_size = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Ad::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Ad");

  if (this->__isset.adid) {
    xfer += oprot->writeFieldBegin("adid", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->adid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.groupid) {
    xfer += oprot->writeFieldBegin("groupid", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->groupid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.planid) {
    xfer += oprot->writeFieldBegin("planid", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->planid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.userid) {
    xfer += oprot->writeFieldBegin("userid", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->userid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.bid) {
    xfer += oprot->writeFieldBegin("bid", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->bid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wuliao_type) {
    xfer += oprot->writeFieldBegin("wuliao_type", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->wuliao_type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.width) {
    xfer += oprot->writeFieldBegin("width", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->width);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.height) {
    xfer += oprot->writeFieldBegin("height", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->height);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.title) {
    xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->title);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.desc) {
    xfer += oprot->writeFieldBegin("desc", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->desc);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.img_url) {
    xfer += oprot->writeFieldBegin("img_url", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->img_url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.target_url) {
    xfer += oprot->writeFieldBegin("target_url", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->target_url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.show_url) {
    xfer += oprot->writeFieldBegin("show_url", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->show_url);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.appname) {
    xfer += oprot->writeFieldBegin("appname", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->appname);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.app_id) {
    xfer += oprot->writeFieldBegin("app_id", ::apache::thrift::protocol::T_STRING, 15);
    xfer += oprot->writeString(this->app_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.app_logo) {
    xfer += oprot->writeFieldBegin("app_logo", ::apache::thrift::protocol::T_STRING, 16);
    xfer += oprot->writeString(this->app_logo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.app_size) {
    xfer += oprot->writeFieldBegin("app_size", ::apache::thrift::protocol::T_I64, 17);
    xfer += oprot->writeI64(this->app_size);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Ad &a, Ad &b) {
  using ::std::swap;
  swap(a.adid, b.adid);
  swap(a.groupid, b.groupid);
  swap(a.planid, b.planid);
  swap(a.userid, b.userid);
  swap(a.bid, b.bid);
  swap(a.wuliao_type, b.wuliao_type);
  swap(a.width, b.width);
  swap(a.height, b.height);
  swap(a.title, b.title);
  swap(a.desc, b.desc);
  swap(a.img_url, b.img_url);
  swap(a.target_url, b.target_url);
  swap(a.show_url, b.show_url);
  swap(a.appname, b.appname);
  swap(a.app_id, b.app_id);
  swap(a.app_logo, b.app_logo);
  swap(a.app_size, b.app_size);
  swap(a.__isset, b.__isset);
}

const char* BSResponse::ascii_fingerprint = "917A4500E95DB906F3E46E16A86B7017";
const uint8_t BSResponse::binary_fingerprint[16] = {0x91,0x7A,0x45,0x00,0xE9,0x5D,0xB9,0x06,0xF3,0xE4,0x6E,0x16,0xA8,0x6B,0x70,0x17};

uint32_t BSResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->res_flag);
          this->__isset.res_flag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->ads.clear();
            uint32_t _size24;
            ::apache::thrift::protocol::TType _etype27;
            xfer += iprot->readListBegin(_etype27, _size24);
            this->ads.resize(_size24);
            uint32_t _i28;
            for (_i28 = 0; _i28 < _size24; ++_i28)
            {
              xfer += this->ads[_i28].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.ads = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BSResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BSResponse");

  if (this->__isset.res_flag) {
    xfer += oprot->writeFieldBegin("res_flag", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->res_flag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ads) {
    xfer += oprot->writeFieldBegin("ads", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->ads.size()));
      std::vector<Ad> ::const_iterator _iter29;
      for (_iter29 = this->ads.begin(); _iter29 != this->ads.end(); ++_iter29)
      {
        xfer += (*_iter29).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(BSResponse &a, BSResponse &b) {
  using ::std::swap;
  swap(a.res_flag, b.res_flag);
  swap(a.ads, b.ads);
  swap(a.__isset, b.__isset);
}

} // namespace
