// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bs

import (
	"fmt"
//	"git.apache.org/thrift.git/lib/go/thrift"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type BSRequest struct {
	Searchid   string `thrift:"searchid,1"`
	Userid     string `thrift:"userid,2"`
	SequenceId string `thrift:"sequence_id,3"`
	Cookie     string `thrift:"cookie,4"`
	AdBlockId  string `thrift:"ad_block_id,5"`
	Width      int32  `thrift:"width,6"`
	Height     int32  `thrift:"height,7"`
	Os         string `thrift:"os,8"`
	Osv        string `thrift:"osv,9"`
	Ip         string `thrift:"ip,10"`
}

func NewBSRequest() *BSRequest {
	return &BSRequest{}
}

func (p *BSRequest) IsSetSearchid() bool {
	return p.Searchid != ""
}

func (p *BSRequest) IsSetUserid() bool {
	return p.Userid != ""
}

func (p *BSRequest) IsSetSequenceId() bool {
	return p.SequenceId != ""
}

func (p *BSRequest) IsSetCookie() bool {
	return p.Cookie != ""
}

func (p *BSRequest) IsSetAdBlockId() bool {
	return p.AdBlockId != ""
}

func (p *BSRequest) IsSetWidth() bool {
	return p.Width != 0
}

func (p *BSRequest) IsSetHeight() bool {
	return p.Height != 0
}

func (p *BSRequest) IsSetOs() bool {
	return p.Os != ""
}

func (p *BSRequest) IsSetOsv() bool {
	return p.Osv != ""
}

func (p *BSRequest) IsSetIp() bool {
	return p.Ip != ""
}

func (p *BSRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BSRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Searchid = v
	}
	return nil
}

func (p *BSRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Userid = v
	}
	return nil
}

func (p *BSRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.SequenceId = v
	}
	return nil
}

func (p *BSRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Cookie = v
	}
	return nil
}

func (p *BSRequest) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.AdBlockId = v
	}
	return nil
}

func (p *BSRequest) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.Width = v
	}
	return nil
}

func (p *BSRequest) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Height = v
	}
	return nil
}

func (p *BSRequest) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Os = v
	}
	return nil
}

func (p *BSRequest) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Osv = v
	}
	return nil
}

func (p *BSRequest) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Ip = v
	}
	return nil
}

func (p *BSRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BSRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BSRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSearchid() {
		if err := oprot.WriteFieldBegin("searchid", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:searchid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Searchid)); err != nil {
			return fmt.Errorf("%T.searchid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:searchid: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserid() {
		if err := oprot.WriteFieldBegin("userid", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:userid: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Userid)); err != nil {
			return fmt.Errorf("%T.userid (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:userid: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSequenceId() {
		if err := oprot.WriteFieldBegin("sequence_id", thrift.STRING, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:sequence_id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SequenceId)); err != nil {
			return fmt.Errorf("%T.sequence_id (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:sequence_id: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCookie() {
		if err := oprot.WriteFieldBegin("cookie", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:cookie: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Cookie)); err != nil {
			return fmt.Errorf("%T.cookie (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:cookie: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdBlockId() {
		if err := oprot.WriteFieldBegin("ad_block_id", thrift.STRING, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:ad_block_id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.AdBlockId)); err != nil {
			return fmt.Errorf("%T.ad_block_id (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:ad_block_id: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:width: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Width)); err != nil {
			return fmt.Errorf("%T.width (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:width: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:height: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Height)); err != nil {
			return fmt.Errorf("%T.height (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:height: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetOs() {
		if err := oprot.WriteFieldBegin("os", thrift.STRING, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:os: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Os)); err != nil {
			return fmt.Errorf("%T.os (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:os: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetOsv() {
		if err := oprot.WriteFieldBegin("osv", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:osv: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Osv)); err != nil {
			return fmt.Errorf("%T.osv (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:osv: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetIp() {
		if err := oprot.WriteFieldBegin("ip", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:ip: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Ip)); err != nil {
			return fmt.Errorf("%T.ip (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:ip: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSRequest(%+v)", *p)
}

type Ad struct {
	Adid       int64  `thrift:"adid,1"`
	Groupid    int64  `thrift:"groupid,2"`
	Planid     int64  `thrift:"planid,3"`
	Userid     int64  `thrift:"userid,4"`
	Bid        int64  `thrift:"bid,5"`
	WuliaoType int32  `thrift:"wuliao_type,6"`
	Width      int32  `thrift:"width,7"`
	Height     int32  `thrift:"height,8"`
	Title      string `thrift:"title,9"`
	Desc       string `thrift:"desc,10"`
	ImgUrl     string `thrift:"img_url,11"`
	TargetUrl  string `thrift:"target_url,12"`
	ShowUrl    string `thrift:"show_url,13"`
	Appname    string `thrift:"appname,14"`
	AppId      string `thrift:"app_id,15"`
	AppLogo    string `thrift:"app_logo,16"`
	AppSize    int64  `thrift:"app_size,17"`
}

func NewAd() *Ad {
	return &Ad{}
}

func (p *Ad) IsSetAdid() bool {
	return p.Adid != 0
}

func (p *Ad) IsSetGroupid() bool {
	return p.Groupid != 0
}

func (p *Ad) IsSetPlanid() bool {
	return p.Planid != 0
}

func (p *Ad) IsSetUserid() bool {
	return p.Userid != 0
}

func (p *Ad) IsSetBid() bool {
	return p.Bid != 0
}

func (p *Ad) IsSetWuliaoType() bool {
	return p.WuliaoType != 0
}

func (p *Ad) IsSetWidth() bool {
	return p.Width != 0
}

func (p *Ad) IsSetHeight() bool {
	return p.Height != 0
}

func (p *Ad) IsSetTitle() bool {
	return p.Title != ""
}

func (p *Ad) IsSetDesc() bool {
	return p.Desc != ""
}

func (p *Ad) IsSetImgUrl() bool {
	return p.ImgUrl != ""
}

func (p *Ad) IsSetTargetUrl() bool {
	return p.TargetUrl != ""
}

func (p *Ad) IsSetShowUrl() bool {
	return p.ShowUrl != ""
}

func (p *Ad) IsSetAppname() bool {
	return p.Appname != ""
}

func (p *Ad) IsSetAppId() bool {
	return p.AppId != ""
}

func (p *Ad) IsSetAppLogo() bool {
	return p.AppLogo != ""
}

func (p *Ad) IsSetAppSize() bool {
	return p.AppSize != 0
}

func (p *Ad) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Ad) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Adid = v
	}
	return nil
}

func (p *Ad) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *Ad) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Planid = v
	}
	return nil
}

func (p *Ad) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Userid = v
	}
	return nil
}

func (p *Ad) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Bid = v
	}
	return nil
}

func (p *Ad) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.WuliaoType = v
	}
	return nil
}

func (p *Ad) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Width = v
	}
	return nil
}

func (p *Ad) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Height = v
	}
	return nil
}

func (p *Ad) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *Ad) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Desc = v
	}
	return nil
}

func (p *Ad) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.ImgUrl = v
	}
	return nil
}

func (p *Ad) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.TargetUrl = v
	}
	return nil
}

func (p *Ad) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.ShowUrl = v
	}
	return nil
}

func (p *Ad) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.Appname = v
	}
	return nil
}

func (p *Ad) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.AppId = v
	}
	return nil
}

func (p *Ad) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.AppLogo = v
	}
	return nil
}

func (p *Ad) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.AppSize = v
	}
	return nil
}

func (p *Ad) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ad"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Ad) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdid() {
		if err := oprot.WriteFieldBegin("adid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:adid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Adid)); err != nil {
			return fmt.Errorf("%T.adid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:adid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupid() {
		if err := oprot.WriteFieldBegin("groupid", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Groupid)); err != nil {
			return fmt.Errorf("%T.groupid (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlanid() {
		if err := oprot.WriteFieldBegin("planid", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:planid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Planid)); err != nil {
			return fmt.Errorf("%T.planid (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:planid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserid() {
		if err := oprot.WriteFieldBegin("userid", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:userid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Userid)); err != nil {
			return fmt.Errorf("%T.userid (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:userid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBid() {
		if err := oprot.WriteFieldBegin("bid", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:bid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Bid)); err != nil {
			return fmt.Errorf("%T.bid (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:bid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetWuliaoType() {
		if err := oprot.WriteFieldBegin("wuliao_type", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:wuliao_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.WuliaoType)); err != nil {
			return fmt.Errorf("%T.wuliao_type (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:wuliao_type: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:width: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Width)); err != nil {
			return fmt.Errorf("%T.width (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:width: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:height: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Height)); err != nil {
			return fmt.Errorf("%T.height (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:height: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:title: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Title)); err != nil {
			return fmt.Errorf("%T.title (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:title: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:desc: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetImgUrl() {
		if err := oprot.WriteFieldBegin("img_url", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:img_url: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ImgUrl)); err != nil {
			return fmt.Errorf("%T.img_url (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:img_url: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetUrl() {
		if err := oprot.WriteFieldBegin("target_url", thrift.STRING, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:target_url: %s", p, err)
		}
		if err := oprot.WriteString(string(p.TargetUrl)); err != nil {
			return fmt.Errorf("%T.target_url (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:target_url: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowUrl() {
		if err := oprot.WriteFieldBegin("show_url", thrift.STRING, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:show_url: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ShowUrl)); err != nil {
			return fmt.Errorf("%T.show_url (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:show_url: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppname() {
		if err := oprot.WriteFieldBegin("appname", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:appname: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Appname)); err != nil {
			return fmt.Errorf("%T.appname (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:appname: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err := oprot.WriteFieldBegin("app_id", thrift.STRING, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:app_id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.AppId)); err != nil {
			return fmt.Errorf("%T.app_id (15) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:app_id: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppLogo() {
		if err := oprot.WriteFieldBegin("app_logo", thrift.STRING, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:app_logo: %s", p, err)
		}
		if err := oprot.WriteString(string(p.AppLogo)); err != nil {
			return fmt.Errorf("%T.app_logo (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:app_logo: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppSize() {
		if err := oprot.WriteFieldBegin("app_size", thrift.I64, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:app_size: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.AppSize)); err != nil {
			return fmt.Errorf("%T.app_size (17) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:app_size: %s", p, err)
		}
	}
	return err
}

func (p *Ad) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ad(%+v)", *p)
}

type BSResponse struct {
	ResFlag int32 `thrift:"res_flag,1"`
	Ads     []*Ad `thrift:"ads,2"`
}

func NewBSResponse() *BSResponse {
	return &BSResponse{}
}

func (p *BSResponse) IsSetResFlag() bool {
	return p.ResFlag != 0
}

func (p *BSResponse) IsSetAds() bool {
	return p.Ads != nil && len(p.Ads) > 0
}

func (p *BSResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BSResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ResFlag = v
	}
	return nil
}

func (p *BSResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Ads = make([]*Ad, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := NewAd()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.Ads = append(p.Ads, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *BSResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BSResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BSResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResFlag() {
		if err := oprot.WriteFieldBegin("res_flag", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:res_flag: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ResFlag)); err != nil {
			return fmt.Errorf("%T.res_flag (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:res_flag: %s", p, err)
		}
	}
	return err
}

func (p *BSResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Ads != nil {
		if p.IsSetAds() {
			if err := oprot.WriteFieldBegin("ads", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:ads: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ads)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Ads {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:ads: %s", p, err)
			}
		}
	}
	return err
}

func (p *BSResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSResponse(%+v)", *p)
}
