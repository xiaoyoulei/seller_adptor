// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package ui2bs

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type AdSlotType int64

const (
	AdSlotType_BANNER       AdSlotType = 1
	AdSlotType_OFFERWALL    AdSlotType = 2
	AdSlotType_RECOMMEND    AdSlotType = 3
	AdSlotType_INTERSTITIAL AdSlotType = 4
)

func (p AdSlotType) String() string {
	switch p {
	case AdSlotType_BANNER:
		return "AdSlotType_BANNER"
	case AdSlotType_OFFERWALL:
		return "AdSlotType_OFFERWALL"
	case AdSlotType_RECOMMEND:
		return "AdSlotType_RECOMMEND"
	case AdSlotType_INTERSTITIAL:
		return "AdSlotType_INTERSTITIAL"
	}
	return "<UNSET>"
}

func AdSlotTypeFromString(s string) (AdSlotType, error) {
	switch s {
	case "AdSlotType_BANNER":
		return AdSlotType_BANNER, nil
	case "AdSlotType_OFFERWALL":
		return AdSlotType_OFFERWALL, nil
	case "AdSlotType_RECOMMEND":
		return AdSlotType_RECOMMEND, nil
	case "AdSlotType_INTERSTITIAL":
		return AdSlotType_INTERSTITIAL, nil
	}
	return AdSlotType(math.MinInt32 - 1), fmt.Errorf("not a valid AdSlotType string")
}

type AdSlotStyle int64

const (
	AdSlotStyle_TEXT      AdSlotStyle = 1
	AdSlotStyle_IMAGE     AdSlotStyle = 2
	AdSlotStyle_ICON_TEXT AdSlotStyle = 3
	AdSlotStyle_SMART_AD  AdSlotStyle = 4
	AdSlotStyle_VIDEO     AdSlotStyle = 5
)

func (p AdSlotStyle) String() string {
	switch p {
	case AdSlotStyle_TEXT:
		return "AdSlotStyle_TEXT"
	case AdSlotStyle_IMAGE:
		return "AdSlotStyle_IMAGE"
	case AdSlotStyle_ICON_TEXT:
		return "AdSlotStyle_ICON_TEXT"
	case AdSlotStyle_SMART_AD:
		return "AdSlotStyle_SMART_AD"
	case AdSlotStyle_VIDEO:
		return "AdSlotStyle_VIDEO"
	}
	return "<UNSET>"
}

func AdSlotStyleFromString(s string) (AdSlotStyle, error) {
	switch s {
	case "AdSlotStyle_TEXT":
		return AdSlotStyle_TEXT, nil
	case "AdSlotStyle_IMAGE":
		return AdSlotStyle_IMAGE, nil
	case "AdSlotStyle_ICON_TEXT":
		return AdSlotStyle_ICON_TEXT, nil
	case "AdSlotStyle_SMART_AD":
		return AdSlotStyle_SMART_AD, nil
	case "AdSlotStyle_VIDEO":
		return AdSlotStyle_VIDEO, nil
	}
	return AdSlotStyle(math.MinInt32 - 1), fmt.Errorf("not a valid AdSlotStyle string")
}

type OSType int64

const (
	OSType_UNKNOWN OSType = 0
	OSType_ANDROID OSType = 1
	OSType_IOS     OSType = 2
	OSType_WP      OSType = 3
)

func (p OSType) String() string {
	switch p {
	case OSType_UNKNOWN:
		return "OSType_UNKNOWN"
	case OSType_ANDROID:
		return "OSType_ANDROID"
	case OSType_IOS:
		return "OSType_IOS"
	case OSType_WP:
		return "OSType_WP"
	}
	return "<UNSET>"
}

func OSTypeFromString(s string) (OSType, error) {
	switch s {
	case "OSType_UNKNOWN":
		return OSType_UNKNOWN, nil
	case "OSType_ANDROID":
		return OSType_ANDROID, nil
	case "OSType_IOS":
		return OSType_IOS, nil
	case "OSType_WP":
		return OSType_WP, nil
	}
	return OSType(math.MinInt32 - 1), fmt.Errorf("not a valid OSType string")
}

type DeviceIDType int64

const (
	DeviceIDType_IMEI      DeviceIDType = 1
	DeviceIDType_MAC       DeviceIDType = 2
	DeviceIDType_IDFA      DeviceIDType = 3
	DeviceIDType_AAID      DeviceIDType = 4
	DeviceIDType_OPENUDID  DeviceIDType = 5
	DeviceIDType_ANDROIDID DeviceIDType = 6
	DeviceIDType_UDID      DeviceIDType = 7
	DeviceIDType_ODIN      DeviceIDType = 8
	DeviceIDType_DUID      DeviceIDType = 9
)

func (p DeviceIDType) String() string {
	switch p {
	case DeviceIDType_IMEI:
		return "DeviceIDType_IMEI"
	case DeviceIDType_MAC:
		return "DeviceIDType_MAC"
	case DeviceIDType_IDFA:
		return "DeviceIDType_IDFA"
	case DeviceIDType_AAID:
		return "DeviceIDType_AAID"
	case DeviceIDType_OPENUDID:
		return "DeviceIDType_OPENUDID"
	case DeviceIDType_ANDROIDID:
		return "DeviceIDType_ANDROIDID"
	case DeviceIDType_UDID:
		return "DeviceIDType_UDID"
	case DeviceIDType_ODIN:
		return "DeviceIDType_ODIN"
	case DeviceIDType_DUID:
		return "DeviceIDType_DUID"
	}
	return "<UNSET>"
}

func DeviceIDTypeFromString(s string) (DeviceIDType, error) {
	switch s {
	case "DeviceIDType_IMEI":
		return DeviceIDType_IMEI, nil
	case "DeviceIDType_MAC":
		return DeviceIDType_MAC, nil
	case "DeviceIDType_IDFA":
		return DeviceIDType_IDFA, nil
	case "DeviceIDType_AAID":
		return DeviceIDType_AAID, nil
	case "DeviceIDType_OPENUDID":
		return DeviceIDType_OPENUDID, nil
	case "DeviceIDType_ANDROIDID":
		return DeviceIDType_ANDROIDID, nil
	case "DeviceIDType_UDID":
		return DeviceIDType_UDID, nil
	case "DeviceIDType_ODIN":
		return DeviceIDType_ODIN, nil
	case "DeviceIDType_DUID":
		return DeviceIDType_DUID, nil
	}
	return DeviceIDType(math.MinInt32 - 1), fmt.Errorf("not a valid DeviceIDType string")
}

type NetworkType int64

const (
	NetworkType_WIFI             NetworkType = 1
	NetworkType_CELLULAR_UNKNOWN NetworkType = 2
	NetworkType_CELLULAR_2G      NetworkType = 3
	NetworkType_CELLULAR_3G      NetworkType = 4
	NetworkType_CELLULAR_4G      NetworkType = 5
)

func (p NetworkType) String() string {
	switch p {
	case NetworkType_WIFI:
		return "NetworkType_WIFI"
	case NetworkType_CELLULAR_UNKNOWN:
		return "NetworkType_CELLULAR_UNKNOWN"
	case NetworkType_CELLULAR_2G:
		return "NetworkType_CELLULAR_2G"
	case NetworkType_CELLULAR_3G:
		return "NetworkType_CELLULAR_3G"
	case NetworkType_CELLULAR_4G:
		return "NetworkType_CELLULAR_4G"
	}
	return "<UNSET>"
}

func NetworkTypeFromString(s string) (NetworkType, error) {
	switch s {
	case "NetworkType_WIFI":
		return NetworkType_WIFI, nil
	case "NetworkType_CELLULAR_UNKNOWN":
		return NetworkType_CELLULAR_UNKNOWN, nil
	case "NetworkType_CELLULAR_2G":
		return NetworkType_CELLULAR_2G, nil
	case "NetworkType_CELLULAR_3G":
		return NetworkType_CELLULAR_3G, nil
	case "NetworkType_CELLULAR_4G":
		return NetworkType_CELLULAR_4G, nil
	}
	return NetworkType(math.MinInt32 - 1), fmt.Errorf("not a valid NetworkType string")
}

type Media struct {
	Appsid    string `thrift:"appsid,1,required"`
	ChannelId string `thrift:"channel_id,2,required"`
}

func NewMedia() *Media {
	return &Media{}
}

func (p *Media) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Media) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Appsid = v
	}
	return nil
}

func (p *Media) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.ChannelId = v
	}
	return nil
}

func (p *Media) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Media"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Media) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("appsid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:appsid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Appsid)); err != nil {
		return fmt.Errorf("%T.appsid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:appsid: %s", p, err)
	}
	return err
}

func (p *Media) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("channel_id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:channel_id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ChannelId)); err != nil {
		return fmt.Errorf("%T.channel_id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:channel_id: %s", p, err)
	}
	return err
}

func (p *Media) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Media(%+v)", *p)
}

type Size struct {
	Width  int32 `thrift:"width,1"`
	Height int32 `thrift:"height,2"`
}

func NewSize() *Size {
	return &Size{}
}

func (p *Size) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Size) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Width = v
	}
	return nil
}

func (p *Size) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Height = v
	}
	return nil
}

func (p *Size) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Size"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Size) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("width", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:width: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Width)); err != nil {
		return fmt.Errorf("%T.width (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:width: %s", p, err)
	}
	return err
}

func (p *Size) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("height", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:height: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Height)); err != nil {
		return fmt.Errorf("%T.height (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:height: %s", p, err)
	}
	return err
}

func (p *Size) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Size(%+v)", *p)
}

type AdSlot struct {
	Id        string         `thrift:"id,1"`
	TypeA1    AdSlotType     `thrift:"type,2"`
	Style     []AdSlotStyle  `thrift:"style,3"`
	Size      *Size          `thrift:"size,4"`
	Templates map[int32]bool `thrift:"templates,5"`
	AdCount   int32          `thrift:"ad_count,6"`
}

func NewAdSlot() *AdSlot {
	return &AdSlot{
		TypeA1: math.MinInt32 - 1, // unset sentinal value

		AdCount: 1,
	}
}

func (p *AdSlot) IsSetTypeA1() bool {
	return int64(p.TypeA1) != math.MinInt32-1
}

func (p *AdSlot) IsSetTemplates() bool {
	return p.Templates != nil && len(p.Templates) > 0
}

func (p *AdSlot) IsSetAdCount() bool {
	return p.AdCount != 1
}

func (p *AdSlot) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AdSlot) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *AdSlot) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TypeA1 = AdSlotType(v)
	}
	return nil
}

func (p *AdSlot) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Style = make([]AdSlotStyle, 0, size)
	for i := 0; i < size; i++ {
		var _elem0 AdSlotStyle
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem0 = AdSlotStyle(v)
		}
		p.Style = append(p.Style, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *AdSlot) readField4(iprot thrift.TProtocol) error {
	p.Size = NewSize()
	if err := p.Size.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Size)
	}
	return nil
}

func (p *AdSlot) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return fmt.Errorf("error reading set being: %s")
	}
	p.Templates = make(map[int32]bool, size)
	for i := 0; i < size; i++ {
		var _elem1 int32
		if v, err := iprot.ReadI32(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem1 = v
		}
		p.Templates[_elem1] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return fmt.Errorf("error reading set end: %s")
	}
	return nil
}

func (p *AdSlot) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.AdCount = v
	}
	return nil
}

func (p *AdSlot) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AdSlot"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AdSlot) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *AdSlot) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:type: %s", p, err)
		}
	}
	return err
}

func (p *AdSlot) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Style != nil {
		if err := oprot.WriteFieldBegin("style", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:style: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.I32, len(p.Style)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Style {
			if err := oprot.WriteI32(int32(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:style: %s", p, err)
		}
	}
	return err
}

func (p *AdSlot) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Size != nil {
		if err := oprot.WriteFieldBegin("size", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:size: %s", p, err)
		}
		if err := p.Size.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Size)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:size: %s", p, err)
		}
	}
	return err
}

func (p *AdSlot) writeField5(oprot thrift.TProtocol) (err error) {
	if p.Templates != nil {
		if p.IsSetTemplates() {
			if err := oprot.WriteFieldBegin("templates", thrift.SET, 5); err != nil {
				return fmt.Errorf("%T write field begin error 5:templates: %s", p, err)
			}
			if err := oprot.WriteSetBegin(thrift.I32, len(p.Templates)); err != nil {
				return fmt.Errorf("error writing set begin: %s")
			}
			for v, _ := range p.Templates {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return fmt.Errorf("error writing set end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 5:templates: %s", p, err)
			}
		}
	}
	return err
}

func (p *AdSlot) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdCount() {
		if err := oprot.WriteFieldBegin("ad_count", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:ad_count: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.AdCount)); err != nil {
			return fmt.Errorf("%T.ad_count (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:ad_count: %s", p, err)
		}
	}
	return err
}

func (p *AdSlot) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AdSlot(%+v)", *p)
}

type DeviceID struct {
	TypeA1  DeviceIDType `thrift:"type,1"`
	Id      string       `thrift:"id,2"`
	Compact bool         `thrift:"compact,3"`
	Md5     bool         `thrift:"md5,4"`
}

func NewDeviceID() *DeviceID {
	return &DeviceID{
		TypeA1: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *DeviceID) IsSetTypeA1() bool {
	return int64(p.TypeA1) != math.MinInt32-1
}

func (p *DeviceID) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeviceID) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.TypeA1 = DeviceIDType(v)
	}
	return nil
}

func (p *DeviceID) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *DeviceID) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Compact = v
	}
	return nil
}

func (p *DeviceID) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Md5 = v
	}
	return nil
}

func (p *DeviceID) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DeviceID"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *DeviceID) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:type: %s", p, err)
		}
	}
	return err
}

func (p *DeviceID) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:id: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Id)); err != nil {
		return fmt.Errorf("%T.id (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:id: %s", p, err)
	}
	return err
}

func (p *DeviceID) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compact", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:compact: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Compact)); err != nil {
		return fmt.Errorf("%T.compact (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:compact: %s", p, err)
	}
	return err
}

func (p *DeviceID) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("md5", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:md5: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Md5)); err != nil {
		return fmt.Errorf("%T.md5 (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:md5: %s", p, err)
	}
	return err
}

func (p *DeviceID) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeviceID(%+v)", *p)
}

type Device struct {
	Os    OSType      `thrift:"os,1,required"`
	Osv   string      `thrift:"osv,2"`
	DevId []*DeviceID `thrift:"dev_id,3"`
}

func NewDevice() *Device {
	return &Device{
		Os: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Device) IsSetOs() bool {
	return int64(p.Os) != math.MinInt32-1
}

func (p *Device) IsSetOsv() bool {
	return p.Osv != ""
}

func (p *Device) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Device) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Os = OSType(v)
	}
	return nil
}

func (p *Device) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Osv = v
	}
	return nil
}

func (p *Device) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.DevId = make([]*DeviceID, 0, size)
	for i := 0; i < size; i++ {
		_elem2 := NewDeviceID()
		if err := _elem2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem2)
		}
		p.DevId = append(p.DevId, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *Device) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Device"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Device) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOs() {
		if err := oprot.WriteFieldBegin("os", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:os: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Os)); err != nil {
			return fmt.Errorf("%T.os (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:os: %s", p, err)
		}
	}
	return err
}

func (p *Device) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOsv() {
		if err := oprot.WriteFieldBegin("osv", thrift.STRING, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:osv: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Osv)); err != nil {
			return fmt.Errorf("%T.osv (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:osv: %s", p, err)
		}
	}
	return err
}

func (p *Device) writeField3(oprot thrift.TProtocol) (err error) {
	if p.DevId != nil {
		if err := oprot.WriteFieldBegin("dev_id", thrift.LIST, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:dev_id: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DevId)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.DevId {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:dev_id: %s", p, err)
		}
	}
	return err
}

func (p *Device) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Device(%+v)", *p)
}

type Network struct {
	Ip               string      `thrift:"ip,1"`
	TypeA1           NetworkType `thrift:"type,2"`
	CellularOperator int32       `thrift:"cellular_operator,3"`
	CellularId       string      `thrift:"cellular_id,4"`
}

func NewNetwork() *Network {
	return &Network{
		TypeA1: math.MinInt32 - 1, // unset sentinal value
	}
}

func (p *Network) IsSetTypeA1() bool {
	return int64(p.TypeA1) != math.MinInt32-1
}

func (p *Network) IsSetCellularOperator() bool {
	return p.CellularOperator != 0
}

func (p *Network) IsSetCellularId() bool {
	return p.CellularId != ""
}

func (p *Network) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Network) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Ip = v
	}
	return nil
}

func (p *Network) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.TypeA1 = NetworkType(v)
	}
	return nil
}

func (p *Network) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.CellularOperator = v
	}
	return nil
}

func (p *Network) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.CellularId = v
	}
	return nil
}

func (p *Network) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Network"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Network) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ip: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ip)); err != nil {
		return fmt.Errorf("%T.ip (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ip: %s", p, err)
	}
	return err
}

func (p *Network) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTypeA1() {
		if err := oprot.WriteFieldBegin("type", thrift.I32, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.TypeA1)); err != nil {
			return fmt.Errorf("%T.type (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:type: %s", p, err)
		}
	}
	return err
}

func (p *Network) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellularOperator() {
		if err := oprot.WriteFieldBegin("cellular_operator", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:cellular_operator: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.CellularOperator)); err != nil {
			return fmt.Errorf("%T.cellular_operator (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:cellular_operator: %s", p, err)
		}
	}
	return err
}

func (p *Network) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCellularId() {
		if err := oprot.WriteFieldBegin("cellular_id", thrift.STRING, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:cellular_id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.CellularId)); err != nil {
			return fmt.Errorf("%T.cellular_id (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:cellular_id: %s", p, err)
		}
	}
	return err
}

func (p *Network) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Network(%+v)", *p)
}

type BSRequest struct {
	Searchid string  `thrift:"searchid,1,required"`
	Media    *Media  `thrift:"media,2,required"`
	Adslot   *AdSlot `thrift:"adslot,3,required"`
	Device   *Device `thrift:"device,4,required"`
}

func NewBSRequest() *BSRequest {
	return &BSRequest{}
}

func (p *BSRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BSRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Searchid = v
	}
	return nil
}

func (p *BSRequest) readField2(iprot thrift.TProtocol) error {
	p.Media = NewMedia()
	if err := p.Media.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Media)
	}
	return nil
}

func (p *BSRequest) readField3(iprot thrift.TProtocol) error {
	p.Adslot = NewAdSlot()
	if err := p.Adslot.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Adslot)
	}
	return nil
}

func (p *BSRequest) readField4(iprot thrift.TProtocol) error {
	p.Device = NewDevice()
	if err := p.Device.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Device)
	}
	return nil
}

func (p *BSRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BSRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BSRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("searchid", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:searchid: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Searchid)); err != nil {
		return fmt.Errorf("%T.searchid (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:searchid: %s", p, err)
	}
	return err
}

func (p *BSRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Media != nil {
		if err := oprot.WriteFieldBegin("media", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:media: %s", p, err)
		}
		if err := p.Media.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Media)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:media: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Adslot != nil {
		if err := oprot.WriteFieldBegin("adslot", thrift.STRUCT, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:adslot: %s", p, err)
		}
		if err := p.Adslot.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Adslot)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:adslot: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Device != nil {
		if err := oprot.WriteFieldBegin("device", thrift.STRUCT, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:device: %s", p, err)
		}
		if err := p.Device.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Device)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:device: %s", p, err)
		}
	}
	return err
}

func (p *BSRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSRequest(%+v)", *p)
}

type Ad struct {
	Adid       int64  `thrift:"adid,1"`
	Groupid    int64  `thrift:"groupid,2"`
	Planid     int64  `thrift:"planid,3"`
	Userid     int64  `thrift:"userid,4"`
	Bid        int64  `thrift:"bid,5"`
	WuliaoType int32  `thrift:"wuliao_type,6"`
	Width      int32  `thrift:"width,7"`
	Height     int32  `thrift:"height,8"`
	Title      string `thrift:"title,9"`
	Desc       string `thrift:"desc,10"`
	ImgUrl     string `thrift:"img_url,11"`
	TargetUrl  string `thrift:"target_url,12"`
	ShowUrl    string `thrift:"show_url,13"`
	Appname    string `thrift:"appname,14"`
	AppId      string `thrift:"app_id,15"`
	AppLogo    string `thrift:"app_logo,16"`
	AppSize    int64  `thrift:"app_size,17"`
}

func NewAd() *Ad {
	return &Ad{}
}

func (p *Ad) IsSetAdid() bool {
	return p.Adid != 0
}

func (p *Ad) IsSetGroupid() bool {
	return p.Groupid != 0
}

func (p *Ad) IsSetPlanid() bool {
	return p.Planid != 0
}

func (p *Ad) IsSetUserid() bool {
	return p.Userid != 0
}

func (p *Ad) IsSetBid() bool {
	return p.Bid != 0
}

func (p *Ad) IsSetWuliaoType() bool {
	return p.WuliaoType != 0
}

func (p *Ad) IsSetWidth() bool {
	return p.Width != 0
}

func (p *Ad) IsSetHeight() bool {
	return p.Height != 0
}

func (p *Ad) IsSetTitle() bool {
	return p.Title != ""
}

func (p *Ad) IsSetDesc() bool {
	return p.Desc != ""
}

func (p *Ad) IsSetImgUrl() bool {
	return p.ImgUrl != ""
}

func (p *Ad) IsSetTargetUrl() bool {
	return p.TargetUrl != ""
}

func (p *Ad) IsSetShowUrl() bool {
	return p.ShowUrl != ""
}

func (p *Ad) IsSetAppname() bool {
	return p.Appname != ""
}

func (p *Ad) IsSetAppId() bool {
	return p.AppId != ""
}

func (p *Ad) IsSetAppLogo() bool {
	return p.AppLogo != ""
}

func (p *Ad) IsSetAppSize() bool {
	return p.AppSize != 0
}

func (p *Ad) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.readField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.readField13(iprot); err != nil {
				return err
			}
		case 14:
			if err := p.readField14(iprot); err != nil {
				return err
			}
		case 15:
			if err := p.readField15(iprot); err != nil {
				return err
			}
		case 16:
			if err := p.readField16(iprot); err != nil {
				return err
			}
		case 17:
			if err := p.readField17(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Ad) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Adid = v
	}
	return nil
}

func (p *Ad) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Groupid = v
	}
	return nil
}

func (p *Ad) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Planid = v
	}
	return nil
}

func (p *Ad) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Userid = v
	}
	return nil
}

func (p *Ad) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Bid = v
	}
	return nil
}

func (p *Ad) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.WuliaoType = v
	}
	return nil
}

func (p *Ad) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Width = v
	}
	return nil
}

func (p *Ad) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.Height = v
	}
	return nil
}

func (p *Ad) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.Title = v
	}
	return nil
}

func (p *Ad) readField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s")
	} else {
		p.Desc = v
	}
	return nil
}

func (p *Ad) readField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 11: %s")
	} else {
		p.ImgUrl = v
	}
	return nil
}

func (p *Ad) readField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 12: %s")
	} else {
		p.TargetUrl = v
	}
	return nil
}

func (p *Ad) readField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s")
	} else {
		p.ShowUrl = v
	}
	return nil
}

func (p *Ad) readField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 14: %s")
	} else {
		p.Appname = v
	}
	return nil
}

func (p *Ad) readField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 15: %s")
	} else {
		p.AppId = v
	}
	return nil
}

func (p *Ad) readField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 16: %s")
	} else {
		p.AppLogo = v
	}
	return nil
}

func (p *Ad) readField17(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 17: %s")
	} else {
		p.AppSize = v
	}
	return nil
}

func (p *Ad) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ad"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := p.writeField14(oprot); err != nil {
		return err
	}
	if err := p.writeField15(oprot); err != nil {
		return err
	}
	if err := p.writeField16(oprot); err != nil {
		return err
	}
	if err := p.writeField17(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Ad) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAdid() {
		if err := oprot.WriteFieldBegin("adid", thrift.I64, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:adid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Adid)); err != nil {
			return fmt.Errorf("%T.adid (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:adid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroupid() {
		if err := oprot.WriteFieldBegin("groupid", thrift.I64, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:groupid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Groupid)); err != nil {
			return fmt.Errorf("%T.groupid (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:groupid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlanid() {
		if err := oprot.WriteFieldBegin("planid", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:planid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Planid)); err != nil {
			return fmt.Errorf("%T.planid (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:planid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserid() {
		if err := oprot.WriteFieldBegin("userid", thrift.I64, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:userid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Userid)); err != nil {
			return fmt.Errorf("%T.userid (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:userid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBid() {
		if err := oprot.WriteFieldBegin("bid", thrift.I64, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:bid: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Bid)); err != nil {
			return fmt.Errorf("%T.bid (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:bid: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetWuliaoType() {
		if err := oprot.WriteFieldBegin("wuliao_type", thrift.I32, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:wuliao_type: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.WuliaoType)); err != nil {
			return fmt.Errorf("%T.wuliao_type (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:wuliao_type: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetWidth() {
		if err := oprot.WriteFieldBegin("width", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:width: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Width)); err != nil {
			return fmt.Errorf("%T.width (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:width: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetHeight() {
		if err := oprot.WriteFieldBegin("height", thrift.I32, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:height: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Height)); err != nil {
			return fmt.Errorf("%T.height (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:height: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetTitle() {
		if err := oprot.WriteFieldBegin("title", thrift.STRING, 9); err != nil {
			return fmt.Errorf("%T write field begin error 9:title: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Title)); err != nil {
			return fmt.Errorf("%T.title (9) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 9:title: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err := oprot.WriteFieldBegin("desc", thrift.STRING, 10); err != nil {
			return fmt.Errorf("%T write field begin error 10:desc: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Desc)); err != nil {
			return fmt.Errorf("%T.desc (10) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 10:desc: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetImgUrl() {
		if err := oprot.WriteFieldBegin("img_url", thrift.STRING, 11); err != nil {
			return fmt.Errorf("%T write field begin error 11:img_url: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ImgUrl)); err != nil {
			return fmt.Errorf("%T.img_url (11) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 11:img_url: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetUrl() {
		if err := oprot.WriteFieldBegin("target_url", thrift.STRING, 12); err != nil {
			return fmt.Errorf("%T write field begin error 12:target_url: %s", p, err)
		}
		if err := oprot.WriteString(string(p.TargetUrl)); err != nil {
			return fmt.Errorf("%T.target_url (12) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 12:target_url: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetShowUrl() {
		if err := oprot.WriteFieldBegin("show_url", thrift.STRING, 13); err != nil {
			return fmt.Errorf("%T write field begin error 13:show_url: %s", p, err)
		}
		if err := oprot.WriteString(string(p.ShowUrl)); err != nil {
			return fmt.Errorf("%T.show_url (13) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 13:show_url: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppname() {
		if err := oprot.WriteFieldBegin("appname", thrift.STRING, 14); err != nil {
			return fmt.Errorf("%T write field begin error 14:appname: %s", p, err)
		}
		if err := oprot.WriteString(string(p.Appname)); err != nil {
			return fmt.Errorf("%T.appname (14) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 14:appname: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppId() {
		if err := oprot.WriteFieldBegin("app_id", thrift.STRING, 15); err != nil {
			return fmt.Errorf("%T write field begin error 15:app_id: %s", p, err)
		}
		if err := oprot.WriteString(string(p.AppId)); err != nil {
			return fmt.Errorf("%T.app_id (15) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 15:app_id: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppLogo() {
		if err := oprot.WriteFieldBegin("app_logo", thrift.STRING, 16); err != nil {
			return fmt.Errorf("%T write field begin error 16:app_logo: %s", p, err)
		}
		if err := oprot.WriteString(string(p.AppLogo)); err != nil {
			return fmt.Errorf("%T.app_logo (16) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 16:app_logo: %s", p, err)
		}
	}
	return err
}

func (p *Ad) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppSize() {
		if err := oprot.WriteFieldBegin("app_size", thrift.I64, 17); err != nil {
			return fmt.Errorf("%T write field begin error 17:app_size: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.AppSize)); err != nil {
			return fmt.Errorf("%T.app_size (17) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 17:app_size: %s", p, err)
		}
	}
	return err
}

func (p *Ad) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ad(%+v)", *p)
}

type BSResponse struct {
	ResFlag int32 `thrift:"res_flag,1"`
	Ads     []*Ad `thrift:"ads,2"`
}

func NewBSResponse() *BSResponse {
	return &BSResponse{}
}

func (p *BSResponse) IsSetResFlag() bool {
	return p.ResFlag != 0
}

func (p *BSResponse) IsSetAds() bool {
	return p.Ads != nil && len(p.Ads) > 0
}

func (p *BSResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BSResponse) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ResFlag = v
	}
	return nil
}

func (p *BSResponse) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Ads = make([]*Ad, 0, size)
	for i := 0; i < size; i++ {
		_elem3 := NewAd()
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3)
		}
		p.Ads = append(p.Ads, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *BSResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BSResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BSResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResFlag() {
		if err := oprot.WriteFieldBegin("res_flag", thrift.I32, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:res_flag: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.ResFlag)); err != nil {
			return fmt.Errorf("%T.res_flag (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:res_flag: %s", p, err)
		}
	}
	return err
}

func (p *BSResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Ads != nil {
		if p.IsSetAds() {
			if err := oprot.WriteFieldBegin("ads", thrift.LIST, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:ads: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ads)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Ads {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:ads: %s", p, err)
			}
		}
	}
	return err
}

func (p *BSResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BSResponse(%+v)", *p)
}
